module GpdCont.GroupoidContainer.Morphism where

open import GpdCont.Prelude
open import GpdCont.GroupoidContainer.Base

open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism

private
  variable
    ‚Ñì : Level
    G H K L : GCont ‚Ñì

record GContMorphism {‚Ñì} (G H : GCont ‚Ñì) : Type ‚Ñì where
  private
    module G = GCont G
    module H = GCont H

  field
    shape-mor : G.Shape ‚Üí H.Shape
    pos-path : ‚àÄ (s : G.Shape) ‚Üí H.Pos (shape-mor s) ‚Üí G.Pos s

open GCont
open GContMorphism

GContMorphism‚â° : {Œ± Œ≤ : GContMorphism G H}
  ‚Üí (p : Œ± .shape-mor ‚â° Œ≤ .shape-mor)
  ‚Üí (q : ‚àÄ s ‚Üí PathP (Œª i ‚Üí H .Pos (p i s) ‚Üí G .Pos s) (Œ± .pos-path s) (Œ≤ .pos-path s))
  ‚Üí Œ± ‚â° Œ≤
GContMorphism‚â° p q i .GContMorphism.shape-mor s = p i s
GContMorphism‚â° p q i .GContMorphism.pos-path s = q s i

private
  _‚â°Mor_ : (Œ± Œ≤ : GContMorphism G H) ‚Üí Type _
  _‚â°Mor_ {G} {H} Œ± Œ≤ = Œ£[ p ‚àà Œ± .shape-mor ‚â° Œ≤ .shape-mor ] (‚àÄ s ‚Üí PathP (Œª i ‚Üí H .Pos (p i s) ‚Üí G .Pos s) (Œ± .pos-path s) (Œ≤ .pos-path s))

module _ {Œ± Œ≤ : GContMorphism G H} where
  GContMorphism‚â°Iso : Iso (Œ± ‚â°Mor Œ≤) (Œ± ‚â° Œ≤)
  GContMorphism‚â°Iso .Iso.fun = uncurry GContMorphism‚â°
  GContMorphism‚â°Iso .Iso.inv p .fst i = p i .shape-mor
  GContMorphism‚â°Iso .Iso.inv p .snd s i = p i .pos-path s
  GContMorphism‚â°Iso .Iso.rightInv p i j .shape-mor = p j .shape-mor
  GContMorphism‚â°Iso .Iso.rightInv p i j .pos-path = p j .pos-path
  GContMorphism‚â°Iso .Iso.leftInv p i .fst j = p .fst j
  GContMorphism‚â°Iso .Iso.leftInv p i .snd s = p .snd s

  GContMorphism‚â°Equiv : (Œ± ‚â°Mor Œ≤) ‚âÉ (Œ± ‚â° Œ≤)
  GContMorphism‚â°Equiv = isoToEquiv GContMorphism‚â°Iso

GContId : (G : GCont ‚Ñì) ‚Üí GContMorphism G G
GContId G .GContMorphism.shape-mor = id $ G .Shape
GContId G .GContMorphism.pos-path s = id $ G .Pos s

compGContMorphism : (Œ± : GContMorphism G H) (Œ≤ : GContMorphism H K) ‚Üí GContMorphism G K
compGContMorphism {G} {H} {K} Œ± Œ≤ = composite where
  module Œ± = GContMorphism Œ±
  module Œ≤ = GContMorphism Œ≤

  composite : GContMorphism G K
  composite .shape-mor = Œ≤.shape-mor ‚àò Œ±.shape-mor
  composite .pos-path s = Œ±.pos-path s ‚àò Œ≤.pos-path (Œ± .shape-mor s)

infixl 15 _‚ãÜGCont_
_‚ãÜGCont_ : (Œ± : GContMorphism G H) (Œ≤ : GContMorphism H K) ‚Üí GContMorphism G K
_‚ãÜGCont_ = compGContMorphism

compGContMorphismIdL : (Œ± : GContMorphism G H) ‚Üí GContId G ‚ãÜGCont Œ± ‚â° Œ±
compGContMorphismIdL Œ± = refl

compGContMorphismIdR : (Œ± : GContMorphism G H) ‚Üí Œ± ‚ãÜGCont GContId H ‚â° Œ±
compGContMorphismIdR Œ± = refl

compGContMorphismAssoc : (Œ± : GContMorphism G H) (Œ≤ : GContMorphism H K) (Œ≥ : GContMorphism K L) ‚Üí (Œ± ‚ãÜGCont Œ≤) ‚ãÜGCont Œ≥ ‚â° Œ± ‚ãÜGCont (Œ≤ ‚ãÜGCont Œ≥)
compGContMorphismAssoc Œ± Œ≤ Œ≥ = refl

private
  open import Cubical.Data.Unit
  open import Cubical.Data.Bool
  open import Cubical.Data.Sum
  open import Cubical.Data.Sigma
  open import Cubical.Functions.Involution

  data UPairShape : Type where
    ‚ãÜ : UPairShape
    swap : ‚ãÜ ‚â° ‚ãÜ
    mul : compSquareFiller swap swap refl
    truncùîπ2 : isGroupoid UPairShape

  upair-rec : ‚àÄ {‚Ñì} {B : Type ‚Ñì}
    ‚Üí (isGroupoid B)
    ‚Üí (b : B)
    ‚Üí (p : b ‚â° b)
    ‚Üí (p¬≤ : p ‚àô p ‚â° refl)
    ‚Üí UPairShape ‚Üí B
  upair-rec {B} is-gpd-B b p p¬≤ = go where
    go : _ ‚Üí _
    go ‚ãÜ = b
    go (swap i) = p i
    go (mul i j) = goal i j where
      goal : compSquareFiller p p refl
      goal = coerceCompSquareFiller p¬≤
    go (truncùîπ2 x y p q r s i j k) = is-gpd-B (go x) (go y) (cong go p) (cong go q) (cong (cong go) r) (cong (cong go) s) i j k

  UPairPos : UPairShape ‚Üí hSet _
  UPairPos = upair-rec isGroupoidHSet (Bool , isSetBool) (TypeOfHLevel‚â° 2 notEq) (Œ£SquareSet (Œª X ‚Üí isProp‚ÜíisSet isPropIsSet) (involPathComp notnot))

  UPair : GCont ‚Ñì-zero
  UPair .Shape = UPairShape
  UPair .Pos = ‚ü®_‚ü© ‚àò UPairPos
  UPair .is-groupoid-shape = truncùîπ2
  UPair .is-set-pos = str ‚àò UPairPos

  _‚äó_ : GCont ‚Ñì ‚Üí GCont ‚Ñì ‚Üí GCont ‚Ñì
  G ‚äó H = record
    { Shape = G .Shape √ó H .Shape
    ; Pos = Œª { (g , h) ‚Üí G .Pos g ‚äé H .Pos h }
    ; is-groupoid-shape = isGroupoid√ó (G .is-groupoid-shape) (H .is-groupoid-shape)
    ; is-set-pos = Œª { (g , h) ‚Üí isSet‚äé (G .is-set-pos g) (H .is-set-pos h) }
    }

  Id : GCont ‚Ñì-zero
  Id .Shape = Unit
  Id .Pos _ = Unit
  Id .is-groupoid-shape = isOfHLevelUnit 3
  Id .is-set-pos _ = isOfHLevelUnit 2

  proj-right : GContMorphism (G ‚äó H) H
  proj-right .shape-mor = snd
  proj-right .pos-path _ = inr

  œÄ‚ÇÅ : GContMorphism (Id ‚äó UPair) UPair
  œÄ‚ÇÅ = proj-right {G = Id} {H = UPair}
