open import GpdCont.Prelude
open import GpdCont.Univalence using (ua‚Üí)
open import GpdCont.ActionContainer.Base
open import GpdCont.ActionContainer.Morphism hiding (mkMorphism-syntax)
open import GpdCont.ActionContainer.Transformation
open import GpdCont.HomotopySet using (UnitSet ; EmptySet)
open import GpdCont.GroupAction.Base

open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels as HLevels using (hSet)
open import Cubical.Data.Empty as EmptyType using (‚ä•*)
open import Cubical.Data.Unit as UnitType using (Unit*)
open import Cubical.Algebra.Group.Base
open import Cubical.Algebra.Group.Morphisms using (GroupHom ; IsGroupHom)
open import Cubical.Algebra.Group.MorphismProperties using (GroupIso‚ÜíGroupHom ; invGroupIso ; makeIsGroupHom)
open import Cubical.Algebra.Group.Instances.Unit using (UnitGroup ; contrGroupIsoUnit)

-- open ActionContainerMorphism using (Morphism ; mkMorphism)
-- open Transformation using (Transformation ; Transformation·¥∞ ; TransformationP)

module GpdCont.ActionContainer.Terminal (‚Ñì : Level) where

Shape : hSet ‚Ñì
Shape = UnitSet ‚Ñì

Pos : ‚ü® Shape ‚ü© ‚Üí hSet ‚Ñì
Pos _ = EmptySet ‚Ñì

private
  isContrùîñ0 : isContr (‚ä•* {‚Ñì} ‚âÉ ‚ä•*)
  isContrùîñ0 .fst = idEquiv _
  isContrùîñ0 .snd e = equivEq $ funExt Œª ()

  UnitHom‚Üí : ‚àÄ {‚Ñì'} (G : Group ‚Ñì') ‚Üí GroupHom (UnitGroup {‚Ñì}) G
  UnitHom‚Üí G .fst _ = str G .GroupStr.1g
  UnitHom‚Üí G .snd = makeIsGroupHom Œª _ _ ‚Üí sym $ str G .GroupStr.¬∑IdL _

  ‚ÜíUnitHom : ‚àÄ {‚Ñì'} (G : Group ‚Ñì') ‚Üí GroupHom G (UnitGroup {‚Ñì})
  ‚ÜíUnitHom G .fst _ = tt*
  ‚ÜíUnitHom G .snd = makeIsGroupHom Œª _ _ ‚Üí refl

SymmGroup : ‚ü® Shape ‚ü© ‚Üí Group ‚Ñì
SymmGroup _ = UnitGroup {‚Ñì}

symmAction : ‚àÄ s ‚Üí Action (SymmGroup s) (Pos s)
symmAction _ = GroupHom‚ÜíAction $ UnitHom‚Üí _

terminalContainer : ActionContainer ‚Ñì
terminalContainer = mkActionContainer Shape Pos SymmGroup symmAction

terminalMorphism : (C : ActionContainer ‚Ñì) ‚Üí Morphism C terminalContainer
terminalMorphism C = (u ‚ñ∑ (f , f-equivariant) ‚óÅ œÜ) where
  open GpdCont.ActionContainer.Morphism C terminalContainer using (mkMorphism-syntax)

  module C = ActionContainer C

  u : C.Shape ‚Üí Unit*
  u = const tt*

  f : (s : C.Shape) ‚Üí ‚ä•* ‚Üí C.Pos s
  f s ()

  œÜ : (s : C.Shape) ‚Üí GroupHom (C.SymmGroup s) UnitGroup
  œÜ s = ‚ÜíUnitHom (C.SymmGroup s)

  f-equivariant : ‚àÄ s g ‚Üí (equivFun (C.action g) ‚àò (f s)) ‚â° (f s ‚àò id ‚ä•*)
  f-equivariant s g = funExt Œª ()

module _ {C : ActionContainer ‚Ñì} (F : Morphism C terminalContainer) where
  -- terminalTransformationP : TransformationP F (terminalMorphism C)
  -- terminalTransformationP .TransformationP.shape-path = refl
  -- terminalTransformationP .TransformationP.conjugator‚ÇÄ _ = tt*
  -- terminalTransformationP .TransformationP.conjugator‚ÇÅ _ = tt*
  -- terminalTransformationP .TransformationP.conjugator-path = refl {x = Œª s ‚Üí tt*}
  -- terminalTransformationP .TransformationP.is-conjugate s = refl {x = tt*}
  -- terminalTransformationP .TransformationP.is-pos-equiv s = ua‚Üí Œª ()

  -- terminalTransformation : Transformation F (terminalMorphism C)
  -- terminalTransformation = Transformation.TransformationP‚ÜíTransformation terminalTransformationP

  terminalTransformation : Transformation F (terminalMorphism C)
  terminalTransformation = Transformation.refl-shape (const tt*) _ _ Œª where
    .Transformation·¥∞.conjugator ‚Üí const tt*
    .Transformation·¥∞.is-conjugate s g ‚Üí refl {x = tt*}
    .Transformation·¥∞.is-pos-equiv s ‚Üí funExt Œª ()

  isPropTerminalTransformation : isProp (Transformation F (terminalMorphism C))
  isPropTerminalTransformation x y = {! !}

  -- isPropTerminalTransformationP : isProp (TransformationP F (terminalMorphism C))
  -- isPropTerminalTransformationP Œ± Œ≤ i .TransformationP.shape-path = refl {x = const tt*}
  -- isPropTerminalTransformationP Œ± Œ≤ i .TransformationP.conjugator‚ÇÄ s = tt*
  -- isPropTerminalTransformationP Œ± Œ≤ i .TransformationP.conjugator‚ÇÅ s = tt*
  -- isPropTerminalTransformationP Œ± Œ≤ i .TransformationP.conjugator-path = refl {x = Œª s ‚Üí tt*}
  -- isPropTerminalTransformationP Œ± Œ≤ i .TransformationP.is-conjugate g = refl {x = tt*}
  -- isPropTerminalTransformationP Œ± Œ≤ i .TransformationP.is-pos-equiv = {! !}

{-
  universalProperty : isContr (TransformationP (initMorphism C) F)
  universalProperty = inhProp‚ÜíisContr initialTransformationP isPropInitTransformationP
  -}
