module GpdCont.KanExtension.Left where

open import GpdCont.Prelude

open import Cubical.Foundations.HLevels hiding (extend)
open import Cubical.Data.Sigma.Base
open import Cubical.Categories.Category
open import Cubical.Categories.Functor
open import Cubical.Categories.Functor.Compose using (precomposeF)
open import Cubical.Categories.NaturalTransformation.Base renaming (_‚óè·µõ_ to _‚àô·µõ_)
open import Cubical.Categories.Instances.Sets using (SET)
open import Cubical.Categories.Instances.Functors using () renaming (FUNCTOR to FunctorCat)
open import Cubical.Categories.Adjoint using (module UnitCounit)

private
  variable
    ‚Ñìo ‚Ñìh : Level
    C C‚Ä≤ D : Category ‚Ñìo ‚Ñìh

  ‚àô·µõ-idL : ‚àÄ {F G : Functor C C‚Ä≤} (Œ± : NatTrans F G) ‚Üí idTrans F ‚àô·µõ Œ± ‚â° Œ±
  ‚àô·µõ-idL {C‚Ä≤} Œ± = makeNatTransPath $ funExt Œª c ‚Üí C‚Ä≤ .Category.‚ãÜIdL (Œ± .NatTrans.N-ob c)

module Lan {‚ÑìCo ‚ÑìCh ‚ÑìEo ‚ÑìEh}
  {C : Category ‚ÑìCo ‚ÑìCh}
  {E : Category ‚ÑìEo ‚ÑìEh}
  (J : Functor C E) where
  open Category

  module _ {‚ÑìDo ‚ÑìDh} {D : Category ‚ÑìDo ‚ÑìDh} (F : Functor C D) where
    private
      ‚Ñì = (‚Ñì-suc (‚Ñì-max (‚Ñì-max ‚ÑìCo ‚ÑìCh) (‚Ñì-max (‚Ñì-max ‚ÑìEo ‚ÑìEh) (‚Ñì-max ‚ÑìDo ‚ÑìDh))))

    record Extension : Type ‚Ñì where
      field
        {ext} : Functor E D
        ext-filler : NatTrans F (ext ‚àòF J)

    open Extension

    isLan : (Œ∑ : Extension) ‚Üí Type ‚Ñì
    isLan Œ∑ =
      ‚àÄ (Œ± : Extension)
      ‚Üí ‚àÉ![ Œ±* ‚àà NatTrans (Œ∑ .ext) (Œ± .ext) ] Œ± .ext-filler ‚â° Œ∑ .ext-filler ‚àô·µõ (Œ±* ‚àòÀ° J)

    isPropIsLan : (Œ∑ : Extension) ‚Üí isProp (isLan Œ∑)
    isPropIsLan Œ∑ = isPropŒ† Œª Œ± ‚Üí isPropIsContr

    record Lan : Type ‚Ñì where
      field
        extension : Extension
        is-lan-extension : isLan extension

      lan : Functor E D
      lan = extension .ext

      lan-filler : NatTrans F (lan ‚àòF J)
      lan-filler = extension .ext-filler

      mediator : (Œ± : Extension) ‚Üí NatTrans lan (Œ± .ext)
      mediator Œ± = is-lan-extension Œ± .fst .fst

      mediator-factorization : ‚àÄ (Œ± : Extension) ‚Üí Œ± .ext-filler ‚â° lan-filler ‚àô·µõ (mediator Œ± ‚àòÀ° J)
      mediator-factorization Œ± = is-lan-extension Œ± .fst .snd

      mediator-self : mediator extension ‚â° idTrans lan
      mediator-self = {! !}

  module _ {‚ÑìDo ‚ÑìDh} {D : Category ‚ÑìDo ‚ÑìDh} (has-lan : (F : Functor C D) ‚Üí Lan F) where
    open Functor
    open Extension

    extend : Functor C D ‚Üí Functor E D
    extend F = has-lan F .Lan.extension .ext

    module _ {F F‚Ä≤ : Functor C D} (Œ± : NatTrans F F‚Ä≤) where
      private
        open module LanF = Lan (has-lan F) renaming (extension to Œ∑ ; is-lan-extension to Œ∑-is-lan)
        open module LanF‚Ä≤ = Lan (has-lan F‚Ä≤) renaming (extension to Œ∑‚Ä≤ ; is-lan-extension to Œ∑‚Ä≤-is-lan)

      extend-nat-extension : Extension F
      extend-nat-extension .ext = LanF‚Ä≤.lan
      extend-nat-extension .ext-filler = Œ± ‚àô·µõ LanF‚Ä≤.lan-filler

      extend-nat : NatTrans (extend F) (extend F‚Ä≤)
      extend-nat = LanF.mediator extend-nat-extension

    opaque
      extend-nat-id : ‚àÄ {F : Functor C D} ‚Üí extend-nat (idTrans F) ‚â° idTrans (extend F)
      extend-nat-id {F} =
        extend-nat (idTrans F) ‚â°‚ü®‚ü©
        LanF.mediator (extend-nat-extension (idTrans F))  ‚â°‚ü® cong LanF.mediator p ‚ü©
        LanF.mediator LanF.extension                      ‚â°‚ü® LanF.mediator-self ‚ü©
        idTrans (extend F) ‚àé
        where
          module LanF = Lan (has-lan F)

          p : extend-nat-extension (idTrans F) ‚â° LanF.extension
          p i .ext = LanF.lan
          p i .ext-filler = ‚àô·µõ-idL LanF.lan-filler i

      extend-nat-seq : ‚àÄ {F G H : Functor C D} (Œ± : NatTrans F G) (Œ≤ : NatTrans G H) ‚Üí extend-nat (Œ± ‚àô·µõ Œ≤) ‚â° (extend-nat Œ±) ‚àô·µõ (extend-nat Œ≤)
      extend-nat-seq Œ± Œ≤ = {! !}

    LanFunctor : Functor (FunctorCat C D) (FunctorCat E D)
    LanFunctor .F-ob = extend
    LanFunctor .F-hom = extend-nat
    LanFunctor .F-id = extend-nat-id
    LanFunctor .F-seq = extend-nat-seq

    open UnitCounit using (_‚ä£_)

    private
      J* : Functor (FunctorCat E D) (FunctorCat C D)
      J* = precomposeF D J

    Œ∑ : NatTrans ùüô‚ü® FunctorCat C D ‚ü© (J* ‚àòF LanFunctor)
    Œ∑ .NatTrans.N-ob F = Lan.lan-filler (has-lan F)
    Œ∑ .NatTrans.N-hom = {! !}

    Œµ : NatTrans (LanFunctor ‚àòF J*) ùüô‚ü® FunctorCat E D ‚ü©
    Œµ .NatTrans.N-ob L = Lan.mediator (has-lan (J* ‚üÖ L ‚üÜ)) e where
      e : Extension (J* ‚üÖ L ‚üÜ)
      e .ext = L
      e .ext-filler = idTrans (J* ‚üÖ L ‚üÜ)
    Œµ .NatTrans.N-hom = {! !}

    universalProperty : LanFunctor ‚ä£ J*
    universalProperty ._‚ä£_.Œ∑ = Œ∑
    universalProperty ._‚ä£_.Œµ = Œµ
    universalProperty ._‚ä£_.triangleIdentities = {! !}
  
--module LanSet {‚Ñì}
--  (C E : Category ‚Ñì ‚Ñì)
--  (J : Functor C E)
--  (F : Functor C (SET ‚Ñì))
--  where

--  open import Cubical.HITs.SetQuotients as SQ using (_/_)

--  open Lan J renaming (Lan to LanJ)
--  open Category

--  module Ext where
--    module _ (e : E .ob) where
--      ExtRaw : Type ‚Ñì
--      ExtRaw = Œ£[ c ‚àà C .ob ] (E [ J ‚üÖ c ‚üÜ , e ]) √ó (‚ü® F ‚üÖ c ‚üÜ ‚ü©)

--      _‚àº_ : (x y : ExtRaw) ‚Üí Type ‚Ñì
--      (c , g , p) ‚àº (c‚Ä≤ , g‚Ä≤ , p‚Ä≤) =
--        Œ£[ f ‚àà C [ c , c‚Ä≤ ] ]
--        -- Œ£[ h ‚àà E 
--        (g ‚â° J ‚ü™ f ‚ü´  ‚ãÜ‚ü® E ‚ü© g‚Ä≤) √ó {! !}

--      Ext‚ÇÄ = ExtRaw / _‚àº_

--    ext : Functor E (SET ‚Ñì)
--    ext .Functor.F-ob e = Ext‚ÇÄ e , SQ.squash/
--    ext .Functor.F-hom = {! !}
--    ext .Functor.F-id = {! !}
--    ext .Functor.F-seq = {! !}

--    ext-filler : NatTrans F (ext ‚àòF J)
--    ext-filler = {! !}

--  Ext : Extension F
--  Ext = record { Ext }

--  LanSet : LanJ F
--  LanSet .Lan.Lan.extension = Ext
--  LanSet .Lan.Lan.is-lan-extension = {! !}


----module Lan {‚Ñìo ‚Ñìh} {C : Category ‚Ñìo ‚Ñìh} (J : Functor C (SET ‚Ñì)) (P : Functor C (SET ‚Ñì)) where
----  open Category

----  data Coend (X : SET ‚Ñì .ob) : Type (‚Ñì-max ‚Ñì ‚Ñìo) where
----    coend : (c : C .ob) (g : SET ‚Ñì [ P ‚üÖ c ‚üÜ , X ]) (d : ‚ü® J ‚üÖ c ‚üÜ ‚ü©) ‚Üí Coend X
----    -- coend-eq : 
----    --
----    isSetCoend : isSet (Coend X)

----  open Functor

----  Ext : Functor (SET ‚Ñì) (SET (‚Ñì-max ‚Ñì ‚Ñìo))
----  Ext .F-ob X = Coend X , isSetCoend
----  Ext .F-hom = {! !}
----  Ext .F-id = {! !}
----  Ext .F-seq = {! !}

