module GpdCont.TwoCategory.StructureOver where

open import GpdCont.Prelude
open import GpdCont.TwoCategory.Base

open import Cubical.WildCat.Base using (WildCat)

record TwoCategoryStrOver {‚Ñìo ‚Ñìh} (C : WildCat ‚Ñìo ‚Ñìh) (‚Ñìr : Level): Type (‚Ñì-max ‚Ñìo (‚Ñì-max ‚Ñìh (‚Ñì-suc ‚Ñìr))) where
  private
    open module C = WildCat C using (ob) renaming (Hom[_,_] to hom ; _‚ãÜ_ to _‚ãÜ‚ÇÅ_)

  field
    rel : {x y : ob} (f g : hom x y) ‚Üí Type ‚Ñìr
    is-set-rel : {x y : ob} (f g : hom x y) ‚Üí isSet (rel f g)

  field
    id-rel : {x y : ob} (f : hom x y) ‚Üí rel f f

    trans : {x y : C.ob} {f g h : hom x y}
      ‚Üí rel f g
      ‚Üí rel g h
      ---------
      ‚Üí rel f h

    comp-rel : {x y z : ob}
      ‚Üí {f‚ÇÅ f‚ÇÇ : hom x y} {g‚ÇÅ g‚ÇÇ : hom y z}
      ‚Üí (r : rel f‚ÇÅ f‚ÇÇ)
      ‚Üí (s : rel g‚ÇÅ g‚ÇÇ)
      ---------------------------
      ‚Üí rel (f‚ÇÅ ‚ãÜ‚ÇÅ g‚ÇÅ) (f‚ÇÇ ‚ãÜ‚ÇÅ g‚ÇÇ)

  -- field
  --   is-two-category : IsTwoCategory ob hom rel {! !}

  id-hom : (x : ob) ‚Üí hom x x
  id-hom x = C.id {x}

  -- ü§°

  -- toTwoCategory : TwoCategory ‚Ñìo ‚Ñìh ‚Ñìr
  -- toTwoCategory .TwoCategory.ob = ob
  -- toTwoCategory .TwoCategory.hom = hom
  -- toTwoCategory .TwoCategory.rel = rel
  -- toTwoCategory .TwoCategory.two-category-structure = twoCatStr
  -- toTwoCategory .TwoCategory.is-two-category = isTwoCategory

module _ {‚Ñìo ‚Ñìh} (C : WildCat ‚Ñìo ‚Ñìh) (‚Ñìr : Level) (C‚ÇÇ : TwoCategoryStrOver C ‚Ñìr) where
  private
    open module C = WildCat C using (ob) renaming (Hom[_,_] to hom ; _‚ãÜ_ to _‚ãÜ‚ÇÅ_)
    module C‚ÇÇ = TwoCategoryStrOver C‚ÇÇ

  twoCategoryStr : TwoCategoryStr C.ob C.Hom[_,_] C‚ÇÇ.rel
  twoCategoryStr = record { C‚ÇÇ }

  isTwoCategory : IsTwoCategory _ _ _ twoCategoryStr
  isTwoCategory = record { C‚ÇÇ }
