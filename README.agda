module README where

open import GpdCont.Prelude

open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Data.Nat
open import Cubical.HITs.SetQuotients.Base using (_/_)
open import Cubical.Categories.Category.Base using (Category)

private
  variable
    ‚Ñì : Level


{- Section 2: Quotient and Symmetric Containers -}

module 2¬∑1-QuotientContainers where
  open import GpdCont.QuotientContainer.Base using (QCont)
  open import GpdCont.QuotientContainer.Examples using (UnorderedTuple)
  open import GpdCont.QuotientContainer.Eval using (‚ü¶_‚üß)
  open import GpdCont.QuotientContainer.Premorphism using (Premorphism) renaming (PremorphismEquiv to _‚âà‚Ä≤_)
  open import GpdCont.QuotientContainer.Morphism using (Morphism)
  open import GpdCont.QuotientContainer.Category using (QCONT)

  01-Definition : Type (‚Ñì-suc ‚Ñì)
  01-Definition {‚Ñì} = QCont ‚Ñì

  open QCont using (Shape)

  02-Example : (n : ‚Ñï) ‚Üí QCont ‚Ñì-zero
  02-Example = UnorderedTuple

  03-Definition : QCont ‚Ñì ‚Üí (hSet ‚Ñì ‚Üí hSet ‚Ñì)
  03-Definition = ‚ü¶_‚üß

  04-Example : ‚àÄ {n} {X} ‚Üí ‚ü¶ UnorderedTuple n ‚üß X ‚â° {! !}
  04-Example = {! !}

  05-Definition : (F G : QCont ‚Ñì) ‚Üí Type ‚Ñì
  05-Definition F G = Œ£[ u ‚àà (F.Shape ‚Üí G.Shape) ] Premorphism F G u where
    module F = QCont F
    module G = QCont G

  06-Definition : (F G : QCont ‚Ñì) ‚Üí Type ‚Ñì
  06-Definition = Morphism

  _ : (F G : QCont ‚Ñì) ‚Üí Morphism F G ‚âÉ (Œ£[ u ‚àà (Shape F ‚Üí Shape G) ] (Premorphism F G u / _‚âà‚Ä≤_))
  _ = Œª F G ‚Üí Morphism F G ‚âÉŒ£

  07-Definition : Category (‚Ñì-suc ‚Ñì) ‚Ñì
  07-Definition = QCONT _

module 2¬∑1-SymmetricContainers where
  {- TODO: Rename modules and definitions to symmetric container -}
  open import GpdCont.GroupoidContainer.Base using (GCont)
  open import GpdCont.GroupoidContainer.Morphism using () renaming (GContMorphism to Morphism)
  open import GpdCont.GroupoidContainer.TwoCategory using (GroupoidContainerCat ; ‚ü¶-‚üß)
  open import GpdCont.GroupoidContainer.Eval using (‚ü¶_‚üß)
  open import GpdCont.GroupoidContainer.Examples using (CyclicList)

  open import GpdCont.TwoCategory.Base using (TwoCategory)
  open import GpdCont.TwoCategory.LaxFunctor using (LaxFunctor)
  open import GpdCont.TwoCategory.GroupoidEndo using (Endo)
  

  08-Definition : Type (‚Ñì-suc ‚Ñì)
  08-Definition = GCont _

  09-Definition : (F G : GCont ‚Ñì) ‚Üí Type ‚Ñì
  09-Definition = Morphism

  10-Definition : TwoCategory (‚Ñì-suc ‚Ñì) ‚Ñì ‚Ñì
  10-Definition = GroupoidContainerCat _

  11-Defintion : (G : GCont ‚Ñì) ‚Üí (hGroupoid ‚Ñì ‚Üí hGroupoid ‚Ñì)
  11-Defintion = ‚ü¶_‚üß

  _ : LaxFunctor (GroupoidContainerCat ‚Ñì) (Endo ‚Ñì)
  _ = ‚ü¶-‚üß

  12-Example : GCont ‚Ñì-zero
  12-Example = CyclicList

module 2¬∑3-LiftingQuotientContainers where
  open import Cubical.Algebra.Group.Base
  open import Cubical.Algebra.Group.Morphisms using (GroupHom)
  open import Cubical.HITs.SetTruncation as ST using (‚à•_‚à•‚ÇÇ)

  open import GpdCont.Group.FundamentalGroup using (œÄ‚ÇÅ)
  open import GpdCont.GroupAction.Base using (Action)
  open import GpdCont.GroupAction.Faithful using (isFaithful ; isFaithful‚ÜíisSetTruncAssociatedBundle)
  open import GpdCont.GroupAction.AssociatedBundle using (associatedBundle ; associatedBundleComponents‚âÉOrbits ; Orbits)
  open import GpdCont.Delooping.Map using (map)
  open import GpdCont.GroupoidContainer.Base using (GCont)
  open import GpdCont.QuotientContainer.Premorphism using (Premorphism)
  open import GpdCont.GroupoidContainer.Eval using (‚ü¶_‚üß)
  open import GpdCont.QuotientContainer.Examples using (UnorderedTuple ; degenDup)
  open import GpdCont.QuotientContainer.Base using (QCont)
  open import GpdCont.QuotientContainer.Delooping using (QContDelooping ; DeloopingPos ; hasSetFibersDeloopingPos)
  open import GpdCont.QuotientContainer.DeloopingEval using (LiftEvalEquiv ; Tr)
  open import GpdCont.QuotientContainer.Eval using () renaming (‚ü¶_‚üß to ‚ü¶_‚üß/)

  private
    variable
      G : Group ‚Ñì
      ‚ÑìX : Level
      X : hSet ‚Ñì
  
  module _ (G : Group ‚Ñì) where
    open import GpdCont.Delooping ‚ü® G ‚ü© (str G) using (ùîπ) public
    open import GpdCont.Delooping ‚ü® G ‚ü© (str G) as ùîπG
      using ()
      renaming (ùîπ to ùîπG)

    _ : Type ‚Ñì
    _ = ùîπG

    13-Proposition : {X : hGroupoid ‚ÑìX} ‚Üí (Œ£[ x‚ÇÄ ‚àà ‚ü® X ‚ü© ] GroupHom G (œÄ‚ÇÅ X x‚ÇÄ)) ‚âÉ (ùîπG ‚Üí ‚ü® X ‚ü©)
    13-Proposition {X} = ùîπG.recEquivHom {X = X}

  14-Definition : {G H : Group ‚Ñì} ‚Üí GroupHom G H ‚Üí ùîπ G ‚Üí ùîπ H
  14-Definition = map

  15-Definition : {G : Group ‚Ñì} {X : hSet ‚Ñì} (œÉ : Action G X) ‚Üí (ùîπ G ‚Üí hSet ‚Ñì)
  15-Definition = associatedBundle

  -- Bundles associated to faithful actions are set-truncated.
  16-Proposition : {œÉ : Action {‚Ñì} G X} ‚Üí isFaithful œÉ ‚Üí (Y : hSet ‚Ñì) ‚Üí isSet (fiber (associatedBundle œÉ) Y)
  16-Proposition {œÉ} = isFaithful‚ÜíisSetTruncAssociatedBundle {œÉ = œÉ}

  -- Any quotient container defines a symmetric container.
  17-Definition : QCont ‚Ñì ‚Üí GCont ‚Ñì
  17-Definition = QContDelooping

  -- Bundles associated to quotient containers are set-truncated.
  18-Proposition : (Q : QCont ‚Ñì) (Y : hSet ‚Ñì) ‚Üí isSet (fiber (DeloopingPos Q) Y)
  18-Proposition = hasSetFibersDeloopingPos

  -- The (truncated) interpretation of a delooped container coincides with its ordinary interpretation as a set-endofunctor.
  19-Theorem : (Q : QCont ‚Ñì) (X : hSet ‚Ñì) ‚Üí ‚ü® Tr ‚ü¶ QContDelooping Q ‚üß X ‚ü© ‚âÉ ‚ü® ‚ü¶ Q ‚üß/ X ‚ü©
  19-Theorem = LiftEvalEquiv

  20-Lemma : {G : Group ‚Ñì} {X : hSet ‚Ñì} (œÉ : Action G X) ‚Üí ‚à• Œ£[ x ‚àà ùîπ G ] ‚ü® associatedBundle œÉ x ‚ü© ‚à•‚ÇÇ ‚âÉ Orbits œÉ
  20-Lemma = associatedBundleComponents‚âÉOrbits

  21-Example : Premorphism (UnorderedTuple 1) (UnorderedTuple 2) (id _)
  21-Example = degenDup
